// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: website_configurations.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateWebsiteConfig = `-- name: CreateWebsiteConfig :one
INSERT INTO website_configurations (id, created_at, updated_at, configuration_name, configuration_value, description, active)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, configuration_name, configuration_value, description, created_at, updated_at, active
`

type CreateWebsiteConfigParams struct {
	ID                 pgtype.UUID        `json:"id"`
	CreatedAt          pgtype.Timestamptz `json:"created_at"`
	UpdatedAt          pgtype.Timestamptz `json:"updated_at"`
	ConfigurationName  string             `json:"configuration_name"`
	ConfigurationValue WebsiteConfigValue `json:"configuration_value"`
	Description        pgtype.Text        `json:"description"`
	Active             bool               `json:"active"`
}

func (q *Queries) CreateWebsiteConfig(ctx context.Context, arg CreateWebsiteConfigParams) (WebsiteConfiguration, error) {
	row := q.db.QueryRow(ctx, CreateWebsiteConfig,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ConfigurationName,
		arg.ConfigurationValue,
		arg.Description,
		arg.Active,
	)
	var i WebsiteConfiguration
	err := row.Scan(
		&i.ID,
		&i.ConfigurationName,
		&i.ConfigurationValue,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
	)
	return i, err
}

const GetWebsiteConfigurationByName = `-- name: GetWebsiteConfigurationByName :one
SELECT id, configuration_name, configuration_value, description, created_at, updated_at, active FROM website_configurations WHERE configuration_name = $1 LIMIT 1
`

func (q *Queries) GetWebsiteConfigurationByName(ctx context.Context, configurationName string) (WebsiteConfiguration, error) {
	row := q.db.QueryRow(ctx, GetWebsiteConfigurationByName, configurationName)
	var i WebsiteConfiguration
	err := row.Scan(
		&i.ID,
		&i.ConfigurationName,
		&i.ConfigurationValue,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
	)
	return i, err
}

const GetWebsiteConfigurations = `-- name: GetWebsiteConfigurations :many
SELECT id, configuration_name, configuration_value, description, created_at, updated_at, active FROM website_configurations ORDER BY configuration_name
`

func (q *Queries) GetWebsiteConfigurations(ctx context.Context) ([]WebsiteConfiguration, error) {
	rows, err := q.db.Query(ctx, GetWebsiteConfigurations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WebsiteConfiguration{}
	for rows.Next() {
		var i WebsiteConfiguration
		if err := rows.Scan(
			&i.ID,
			&i.ConfigurationName,
			&i.ConfigurationValue,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
