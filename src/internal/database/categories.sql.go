// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: categories.sql

package database

import (
	"context"
)

const CountCategories = `-- name: CountCategories :one
SELECT count(*) FROM categories
`

func (q *Queries) CountCategories(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountCategories)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const ListCategories = `-- name: ListCategories :many
SELECT id, name, created_at, updated_at FROM categories
LIMIT $1 OFFSET $2
`

type ListCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, ListCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
